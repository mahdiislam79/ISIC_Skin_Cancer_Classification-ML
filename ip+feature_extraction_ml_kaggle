{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9483535,"sourceType":"datasetVersion","datasetId":5768843}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Trial-1\n\n1. Try mean of channels\n    - statistical informations of whole image or of small patches\n2. GLCM\n    - Small matrix size (4/5 bits instead of 8)\n    - Small distance (1 or 2)\n    - Statistical informations of whole image or of small patches (Target is taking a local feature or texture if prior idea of spatial information\n\n3. LBP\n    - Small radius (1, 2)\n    - Neighbours (8, 12, 16)\n    - statistical informations of whole image or of small patches\n    - - Statistical informations of whole image or of small patches (Target is taking a local feature or texture if prior idea of spatial information\n    \n","metadata":{}},{"cell_type":"markdown","source":"## Trial-2 ","metadata":{}},{"cell_type":"markdown","source":"1. Moments\n    - Area can be calculated of a binary image using m(0,0) momentum\n    - Center of an object can be calculated. x = m(1,0)/m(0,0), y = m(0,1)/m(0,0)\n2. Salient Key Points\n    - PDM (Point Distribution Model / Statistical Shape Model\n    - SIFT and SURF","metadata":{}},{"cell_type":"markdown","source":"----------------------------------------------------\n----------------------------------------------------\n----------------------------------------------------","metadata":{}},{"cell_type":"markdown","source":"# Importing necessary libaries","metadata":{}},{"cell_type":"code","source":"import cv2\nimport os\nimport tarfile\nimport pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:14:20.701440Z","iopub.execute_input":"2024-09-26T08:14:20.703301Z","iopub.status.idle":"2024-09-26T08:14:21.466947Z","shell.execute_reply.started":"2024-09-26T08:14:20.703213Z","shell.execute_reply":"2024-09-26T08:14:21.465703Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"# Data import and unzipping","metadata":{}},{"cell_type":"code","source":"# Path to the .tgz file\ntrain_tgz_path = '/kaggle/input/skin-cancer-detecttion/dataset/train.tgz'\nvalid_tgz_path = '/kaggle/input/skin-cancer-detecttion/dataset/val (1).tgz'\n\nextract_dir_train = '/kaggle/working/train'\n\n# Create the new folder if it doesn't exist\nif not os.path.exists(extract_dir_train):\n    os.makedirs(extract_dir_train)\n\n# Open the .tgz file and extract all contents\nwith tarfile.open(train_tgz_path, 'r:gz') as tar:\n    tar.extractall(path=extract_dir_train)\n\nprint(f\"Extracted files to {extract_dir_train}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T07:26:56.990226Z","iopub.execute_input":"2024-09-26T07:26:56.991534Z","iopub.status.idle":"2024-09-26T07:28:37.650911Z","shell.execute_reply.started":"2024-09-26T07:26:56.991430Z","shell.execute_reply":"2024-09-26T07:28:37.649571Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Extracted files to /kaggle/working/train\n","output_type":"stream"}]},{"cell_type":"code","source":"extract_dir_valid = '/kaggle/working/valid'\n\n# Create the new folder if it doesn't exist\nif not os.path.exists(extract_dir_valid):\n    os.makedirs(extract_dir_valid)\n\n# Open the .tgz file and extract all contents\nwith tarfile.open(valid_tgz_path, 'r:gz') as tar:\n    tar.extractall(path=extract_dir_valid)\n\nprint(f\"Extracted files to {extract_dir_valid}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:24:16.934884Z","iopub.execute_input":"2024-09-26T08:24:16.936342Z","iopub.status.idle":"2024-09-26T08:24:47.256969Z","shell.execute_reply.started":"2024-09-26T08:24:16.936288Z","shell.execute_reply":"2024-09-26T08:24:47.254767Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Extracted files to /kaggle/working/valid\n","output_type":"stream"}]},{"cell_type":"code","source":"# Define classes and the directory where files were extracted\nclasses = ['nevus', 'others']\nimage_dir_train = '/kaggle/working/train/train'\n\n# Initialize an empty list to store image file paths and their corresponding labels\ndata = []\n\n# Loop through each class folder and each image within that folder\nfor c in classes:\n    class_dir = os.path.join(image_dir_train, c)\n    \n    if os.path.exists(class_dir):\n        for filename in os.listdir(class_dir):\n            if filename.endswith(('.png', '.jpg', '.jpeg')):  # Filter image files\n                image_path = os.path.join(class_dir, filename)\n                data.append([image_path, c])  # Append image path and its label (class)\n\n# Create a pandas DataFrame from the data\ndf_train = pd.DataFrame(data, columns=['image_path', 'label'])","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:14:25.780561Z","iopub.execute_input":"2024-09-26T08:14:25.781189Z","iopub.status.idle":"2024-09-26T08:14:25.879612Z","shell.execute_reply.started":"2024-09-26T08:14:25.781141Z","shell.execute_reply":"2024-09-26T08:14:25.878132Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"                                       image_path  label\n0  /kaggle/working/train/train/nevus/nev00219.jpg  nevus\n1  /kaggle/working/train/train/nevus/nev06356.jpg  nevus\n2  /kaggle/working/train/train/nevus/nev07488.jpg  nevus\n3  /kaggle/working/train/train/nevus/nev00602.jpg  nevus\n4  /kaggle/working/train/train/nevus/nev04242.jpg  nevus\n","output_type":"stream"}]},{"cell_type":"code","source":"# Display the first few rows of the DataFrame\ndf_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:15:00.158996Z","iopub.execute_input":"2024-09-26T08:15:00.160438Z","iopub.status.idle":"2024-09-26T08:15:00.167874Z","shell.execute_reply.started":"2024-09-26T08:15:00.160384Z","shell.execute_reply":"2024-09-26T08:15:00.166337Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"(15195, 2)"},"metadata":{}}]},{"cell_type":"code","source":"image_dir_valid = '/kaggle/working/valid/val'\n\n# Initialize an empty list to store image file paths and their corresponding labels\ndata = []\n\n# Loop through each class folder and each image within that folder\nfor c in classes:\n    class_dir = os.path.join(image_dir_valid, c)\n    \n    if os.path.exists(class_dir):\n        for filename in os.listdir(class_dir):\n            if filename.endswith(('.png', '.jpg', '.jpeg')):  # Filter image files\n                image_path = os.path.join(class_dir, filename)\n                data.append([image_path, c])  # Append image path and its label (class)\n\n# Create a pandas DataFrame from the data\ndf_valid = pd.DataFrame(data, columns=['image_path', 'label'])","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:27:03.876511Z","iopub.execute_input":"2024-09-26T08:27:03.876930Z","iopub.status.idle":"2024-09-26T08:27:03.902788Z","shell.execute_reply.started":"2024-09-26T08:27:03.876889Z","shell.execute_reply":"2024-09-26T08:27:03.901645Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# Display the first few rows of the DataFrame\ndf_valid.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:27:05.850201Z","iopub.execute_input":"2024-09-26T08:27:05.851162Z","iopub.status.idle":"2024-09-26T08:27:05.857936Z","shell.execute_reply.started":"2024-09-26T08:27:05.851098Z","shell.execute_reply":"2024-09-26T08:27:05.856826Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"(3796, 2)"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}